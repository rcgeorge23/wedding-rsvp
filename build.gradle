buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.3.RELEASE")
        classpath("org.ajoberstar:gradle-git:1.6.0")
        classpath("commons-io:commons-io:2.4")
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'eclipse'
apply plugin: 'org.ajoberstar.grgit'
apply plugin: 'org.ajoberstar.github-pages'
apply plugin: 'org.ajoberstar.release-opinion'

//Imports
import org.ajoberstar.grgit.Grgit
import org.apache.commons.io.FileUtils

repositories {
	jcenter()
    mavenCentral()
}

ext {
	/*
	getCurrentBuildNumber = { 
	    Properties versionProperties = new Properties() 
		File versionPropertiesFile = new File("version.properties")
		versionProperties.load(versionPropertiesFile.newDataInputStream()) 
		return versionProperties.getProperty("artifactBuildNumber")
	}
	*/
	applicationRepositoryName = 'wedding-rsvp'
	applicationRepositoryUrl = 'git@github.com:rcgeorge23/wedding-rsvp.git'
	releaseRepositoryName = 'wedding-rsvp-releases'
	releaseRepositoryUrl = 'git@github.com:rcgeorge23/wedding-rsvp-releases.git'
}

jar {
    baseName = 'wedding-rsvp'
    version = project.version.toString()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-rest'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-jersey'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-freemarker'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    compile group: 'org.apache.poi', name: 'poi', version:'3.15'
    compile group: 'org.apache.poi', name: 'poi-ooxml', version:'3.15'
    compile group: 'org.apache.commons', name: 'commons-lang3', version:'3.4'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    runtime group: 'com.h2database', name: 'h2', version:'1.4.192'
    runtime group: 'mysql', name: 'mysql-connector-java', version:'5.1.39'
   	testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test') {
		exclude(module: 'commons-logging')
    }
}

bootRun {
    addResources = true
}

/*
task buildNumberPlusOne {
	doLast { 
		println "project version:" + project.version.toString()
		Properties props = new Properties() 
		File propsFile = new File("version.properties")
		props.load(propsFile.newDataInputStream()) 
		Integer nextBuildNum = (((props.getProperty("artifactBuildNumber")) as BigDecimal) + 1) 
		props.setProperty("artifactBuildNumber", nextBuildNum.toString()) 
		props.store(propsFile.newWriter(), null) 
		props.load(propsFile.newDataInputStream())
	}
}

task pushVersionFileToApplicationRepo {
	doLast {
		def jenkinsRepo = Grgit.open(dir: "./")
		
		
		FileUtils.deleteQuietly(new File("/tmp/${applicationRepositoryName}"))
		def applicationRepo = Grgit.clone(dir: "/tmp/${applicationRepositoryName}", uri: applicationRepositoryUrl)
		File propsFile = new File("version.properties")
		FileUtils.copyFileToDirectory(propsFile, new File("/tmp/${applicationRepositoryName}"))
		applicationRepo.add(patterns: ['version.properties'])
		applicationRepo.commit(message: "Incremented version number to ${getCurrentBuildNumber()}")
		applicationRepo.push()
	}
}
*/

task pushJarToReleaseRepo {
	doLast { 
		File releaseRepositoryDirectory = new File("/tmp/${releaseRepositoryName}")
		if (releaseRepositoryDirectory.exists()) {
			println "Release directory exists, deleting..."
			FileUtils.deleteQuietly(releaseRepositoryDirectory)
		}
		
		println "Cloning fresh copy of release repo to tmp directory"
		new File("/tmp").mkdirs()
		def releaseGitRepo = Grgit.clone(dir: "/tmp/${releaseRepositoryName}", uri: releaseRepositoryUrl)
		
		File buildArtifactDirectory = new File("build/libs")
		File[] jars = buildArtifactDirectory.listFiles(new FilenameFilter() { 
			public boolean accept(File dir, String filename) { 
				return filename.endsWith(".jar")
			}
        })
		
		if (jars.length == 0) {
			throw new Exception("No build artifact in ${buildArtifactDirectory.absoluteFile}")
		} 
		
		if (jars.length > 1) {
			throw new Exception("More than 1 build artifact found in ${buildArtifactDirectory.absoluteFile}: ${jars.collect { it.name } }")
		}
		
		//there can only be one jar now, create the current and archive dirs if necessary
		File currentBuildArtefactDirectory = new File("/tmp/${releaseRepositoryName}/current")
		File archivedBuildArtefactsDirectory = new File("/tmp/${releaseRepositoryName}/archive")
		
		currentBuildArtefactDirectory.mkdirs()
		archivedBuildArtefactsDirectory.mkdirs()
		
		println "deleting current jar"
		currentBuildArtefactDirectory.listFiles().each { file ->
			FileUtils.deleteQuietly(file)
		}
		
		println "copying freshly built jar to current and archive directory"
		FileUtils.copyFileToDirectory(jars[0], currentBuildArtefactDirectory)
		//FileUtils.copyFileToDirectory(jars[0], archivedBuildArtefactsDirectory) //commented this out for now - do we really want to keep old builds?
		
		println "committing jar and pushing to remote"
		//releaseGitRepo.add(patterns: ['current', 'archive'])
		releaseGitRepo.add(patterns: ['current', 'archive'], update: true)
		releaseGitRepo.add(patterns: ['current', 'archive'])
		releaseGitRepo.commit(message: "Releasing version ${project.version.toString()}")
		releaseGitRepo.push()
	}
}

tasks.release.dependsOn 'build', 'pushJarToReleaseRepo'

